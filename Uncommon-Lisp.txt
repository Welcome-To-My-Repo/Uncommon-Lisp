The Uncommon Lisp Language Specification  --------------------------------------
June 2020
(C)opyright Daniel (Robin) Smith

Introduction -------------------------------------------------------------------
Uncommon Lisp is a dialect of Lisp that can be considered an incrementation of
ANSI Common Lisp much in the same way C++ is, at least in name, a positive
incrementation of the C language.

Uncommon Lisp has only a few design principals:
1. Prioritize emergent syntax.
2. Be compact
3. Be future-proof



Syntax -------------------------------------------------------------------------
Uncommon Lisp supports ASCII or alternatively ISO 646-IRV which both specify
128 possible characters.

Environment --------------------------------------------------------------------
The Environment contains all data created or required when source code is
evaluated. The environment in Uncommon Lisp also contains a reserved symbol
that is used to represent the entire environment itself.

Data ---------------------------------------------------------------------------
Data is the information being manipulated by source code.

Symbols ------------------------------------------------------------------------
All data in the environment is located through the use of Symbols. Symbols them
selves can be assigned to other Symbols.

The Uncommon Lisp Package ------------------------------------------------------
The Uncommon Lisp package contains all functions defined in this specification.
The functions are notated as the function name in lower case within parentheses.
The arguments to each functiom are represented in braces and default values to
each function are represented in square brackets.

(r {Standard Input}[stream designator])

(e [symbol])
