The Uncommon Lisp Language Specification  --------------------------------------
June 2020
(C)opyright Daniel (Robin) Smith

Introduction -------------------------------------------------------------------

Uncommon Lisp or "UcL" is an attempt to correct all the faults that have been 
found and all the ills that have grown against ANSI Common Lisp since the 90's. 
There are a lot, most of them are resolved. Uncommon Lisp is meant to be a 
middle ground to Lisp, between the barren Scheme and the bloated Common Lisp. 

Uncommon Lisp is objectively the best lisp. 

Uncommon Lisp has only a few design principals:
1. Prioritize emergent syntax.
2. Be reasonably compact
3. Allow future-proofing

Emergent syntax means that there should be many ways to implement an algorithm,
using the same base set of operations. Take mathematical operations for example.
There are five basic symbols that can be combined in any order to achieve a
specific algorithm. It's easier to add three addends using two additions than to
invent a new symbol specifically for adding three numbers. In that same sense, 
Uncommon Lisp shall not implement an abstract operation as a component of the 
language unless it cannot be represented with already existing syntax. This 
avoids the redundancy that often occurs in Common Lisp syntax.

Parallel to the first principal, Uncommon Lisp will be a small language. This is
not the same sense of small as Scheme, where any usefulness to the language must
be hand implemented by the users. This is why the term "compact" is used instead
of "small". Scheme is small and it lacks so many basic features that it's 
impossible to use except when implementing a higer level, more feature-full
language. Uncommon Lisp is full-featured without having an overwhelming amount 
of syntax.

The third principal is likely the most important. Lisp as a language is not
future proof. It was designed when general purpose hardware wasn't a concept, 
and died when the PC was popularized. Modern Lisp languages have no access to 
the underlying system because they were left behind when C became the system
language of choice. Uncommon Lisp implements two measures to avoid obsoletion,
it implements a means of interacting with native system libraries, and it
allows extension to implement access to any future manner of resource without
breaking the syntax.

How to Use This Document -------------------------------------------------------

This document outlines the requirements for the Uncommon Lisp language. These 
requirements can be described using UcL syntax, but they are not in this 
document. Because UcL is not intended to be bootstrapped, the features of this
language are described in Lambda Calculus. If they cannot be properly described
in Lamba Calculus, they are described in plain english as a high level 
algorithm.

Syntax -------------------------------------------------------------------------

UcL syntax consists of the standard ASCII table. All visible characters, 
including whitespace, have syntactical meaning.

Data ---------------------------------------------------------------------------

In UcL, the fundamental data types are a number and a character. From these 
types, complex types can be designed using the Uncommon Object System.

Numbers ------------------------------------------------------------------------

Numbers can be any rational value. They can be described using decimal or 
scientific notation. UcL supports bases 2, 10, 16 and 256.

Decimal Notation ---------------------------------------------------------------

In UcL, decimal notation is represented by a number of numeric places followed 
by an optional radix point, ".", followed by an optional number of numeric
places. Each numeric place value is represented by numerals 0-9 for bases 2 and
10 and 0-F for bases 16 and 256. An optional sign prefix, "+" or "-", can be 
added in front of a decimal number.

In base two, only ones and zeros are accepted.

In a base 10 number, only 0-9 is accepted. 

In a hexadecimal number, only 0-F is accepted. 

In a base 256 number, only 0-F are accepted. Notation of each place value in 
radix 256 is unique from the other three bases. Each place value requires two
characters, 0-F and is separated by a comma unless already separated by a radix
point.

Decimal notation without a sign prefix is assumed to represent a positive
number.

Below are some examples of decimal notation in UcL.

-7
4.5
10010
+4FC
-7F,5F.3A,1D

Scientific Notation ------------------------------------------------------------

In UcL, scientific notation is represented by an optional sign, followed by a
numerical place, followed by a radix point, followed by a number of numerical 
places, followed by an exponent symbol, "^", followed by an optional sign 
prefix, followed by a number of numerical places. The places after the exponent
symbol represent a power of the base number of the numerical base of the first
number.

Below are some examples of Scientific Notation in UcL.

+3.05^4
-100101^11101
FF^-A4
74,FF^1A,04

Objects ------------------------------------------------------------------------
