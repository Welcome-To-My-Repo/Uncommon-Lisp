language name is Alchemist or Ether idk.
language is for an incremental compiler dynamic environment.

an image contains the environment.
an environment can be exported, compiled, saved, or loaded as an image.

a program exists as a defined collection of operations in the environment.
the environment can have multiple programs.
an object contains a program.
programs can be compiled, saved, or loaded using objects.

language is used to create programs in the environment.
language has reader, evaluator, compiler, printer.
language has macros.
language has control characters.
language is represented by binary tree.

macros affect how evaluator and compiler interpret syntax tree.
control characters represent how reader represents objects.

enviroment is an object

internal data is either a number, byte, reference, system resource, object, or 
instruction. generic data is either t or nil.

enVironment is an object.
object data
-list of whitespace characters
-list of ignored characters
-function start characters
-function end characters
-procedure start characters
-procedure end characters
-macro start characters
-macro end characters
-assignment operator characters
-initializer characters


syntax macro characters are:
-function call
-create object
-assignment
-macro call

language deals with program structure and data objects.

multiparadigm:
object oriented
procedural 
functional

each paradigm has its own syntax notation:
procedures are blocks of statements.
functions are nested expressions.
objects are groups of methods acting on an object

unassigned identifiers are enumerated types.

sample source code:
------------------------------------------------------
helloworld=!
{
!stream=(gate stdout)
stream.buffer=(+ "hello" (+ "world" |0A|/hex newline character/))
}
helloworld
--------------------------------------------------------
!addtwo=((list)
({
if list
{
!iter=arglst.car
label:loop
total=(+ total iter.car)
if (= iter nil) eval=loop
(produce total)
)}
})
newvar=(addtwo 10 20 30)
-------------------------------------------------------
/create a string/
string=(bytes "helloworld")
-------------------------------------------------------
/create an object/
!newObj is string
newObj is array
newObj is integer
newObj is not integer
newObj.length.require number newObj.contents = (bytes "")
newObj.length=10
------------------------------------------------------------------------------


whitespace characters: " ", tab, lf/cr
ignored characters: control characters, stuff you can't type
function start characters: "("
function end characters: "("
procedure start characters: "{"
procedure end characters: "}"
macro start characters: "["
macro end characters: "]"




