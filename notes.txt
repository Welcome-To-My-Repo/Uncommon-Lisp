functions are a data type
symbols are a data type

all functions are lambdas. they become persistent with a symbol

there is only one (set), no setq or setf
there are only four data types, number, character, symbol, function

data types are made with the object system.
the only basic types that exist at the lowest roots of the environment are 
arithmetic operations, list operations, lambdas and objects. 
the most basic data types are integers and ASCII characters

basic operations are five math operations: add/subtract, multiply/divide, 
modulo.

basic data types are integer, character, list, symbol, function


--------------------------------------------------------------------------------


based on criticism of Common Lisp, here's what Uncommon Lisp changes

one environment for everything, no more compilation environment/read environment/other environment.

Uncommon Lisp doesn't have "images". There's the Incremental Compiler, and 
there's compiled applications. There's no purpose to an image anymore when you
can distribute a native executable which is at least one order of magnitude more
portable. You don't see the JVM using "images".

The CLOS sits on top of an arbitrary type system that it can undermine and 
supercede, eliminating any reason for there to be a parallel type system to the
CLOS in the first place.
