A Stream of Conciousness Laundry List of stuff that Uncommon Lisp should do better than Common Lisp.

	UL has a small core syntax so that package locks aren't needed. Like parentheses, this syntax will be pervasive across the environment. objects that are defined above the core syntax can be undone and remade.

	UL has a small set of core data types. Defining how these are processed creates the "system class" abstraction level that exists in Common Lisp. The meaning of an "integer" can be dynamically changed in the middle of execution.

	All objects are created using the object system. There are no pre-defined system classes that exist elsewhere in the ether. In fact, the type system is the object system and the two terms describe the same abstract system.

	The fundamental symbol type is defined by the object system.
	
	the "format" function stays the same, it's too damn good to change.

	imperative and functional syntax are clearly separated, with definite control structures for each pardigm.

	documentation strings stay as they are, they are made by angels.

	accessing documentation strings, definitions, and other information is done through a single function. Less syntax to remember, more accessibility, more verbose, more.

	no static typing at all. no constants. stuff can just be initialized without a means to write data to it.


	The loop concept is good, implement it better than CL.

	Streams can access anything that supports buffered I/O. There's lots of stuff besides files that do that.

	list structures are the main fundamental data type because they can represent most stuff very well.
	
	introduce more syntax like "let" that allows for granularity with object lifespan.

	capabilities of complete syntax should mirror abilities of POSIX C library. A funky blasphemous concept, but on the other hand, POSIX C represents full access to the system, so a language would need either syntax or a library to mirror all of that.

	loop syntax gets expanded and refined and fancy sub-syntax is gone.

	the language is described as a series of algorithms or in psudo assembly. Uncommon Lisp could be implemented as a C library who knows. You can describe UL with UL, but lets not do that.

	stuff like "readtable" and "printtable" are consolidated and the internal representation of information is made clear to the user.

	"cdr" and "car" are expanded to other abstractions of list contents.

	lambdas are just another base lisp type. lambdas can be bound to symbols.

	refine syntax for describing data (numbers, characters, strings, etc...) to be more concise and definite. No more "possible numbers". context bounds are clearly defined.

	no dotted pairs. dots don't improve readability and pairs can be made without dots.

	symbols in the language standard will be only 4 characters long. this is fine because the permutations when using 0-Z and "-" are over 25 million.

		UcL doesn't rely on a REPL and can be compiled from a source file.

	abstract conceptual hierarchy of UcL:
	Syntactical:
	1	Core Syntax 
	2	Macros
	3	meta syntax

	Data:
	1	t (information exists in a place) 
	2	atomic nature (number, character, string)
	3	object type (the manner in which data is handled)
	4	object system (create new data handling methods)
	5	meta object (data handling method as an object type)
